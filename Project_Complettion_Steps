
Task 1: Clone the project and build using Maven

1. Clone the repository:
   git clone <YOUR_GITHUB_REPO_URL>

2. Navigate into project directory:
   cd ABCtechnologies

3. Build the project using Maven:
   mvn clean install


Task 2: Jenkins Build Pipeline Setup

1. Create a Jenkins pipeline with three stages:
   a) Compile:
      - Execute shell: mvn compile
   b) Test:
      - Execute shell: mvn test
   c) Package:
      - Execute shell: mvn package

2. Execute the pipeline from Jenkins dashboard.

3. Master-Slave Node Setup:
   - Master and Slave node setup already complete.
   - Assign labels to nodes and use 'node' block in Jenkinsfile to target specific node.

Example Jenkinsfile:
pipeline {
    agent none
    stages {
        stage('Compile') {
            agent { label 'slave-1' }
            steps {
                sh 'mvn compile'
            }
        }
        stage('Test') {
            agent { label 'slave-2' }
            steps {
                sh 'mvn test'
            }
        }
        stage('Package') {
            agent { label 'slave-3' }
            steps {
                sh 'mvn package'
            }
        }
    }
}


Task 3: Docker Integration with Jenkins

1. Dockerfile (place in project root):

FROM tomcat:9.0
COPY target/*.war /usr/local/tomcat/webapps/ABCtechnologies.war

2. Build Docker image:
   docker build -t abctechnologies-image .

3. Run Docker container:
   docker run -d -p 9080:8080 --name abc_container abctechnologies-image

4. Create CI/CD job on Jenkins:
   - Enhance Package job:
     - Post build: Add 'Execute Shell':
       docker build -t abctechnologies-image .
       docker run -d -p 9080:8080 --name abc_container abctechnologies-image


Task 4: Ansible and Kubernetes Integration

1. Ansible Playbook (deploy.yaml):

---
- hosts: dockerhost
  tasks:
    - name: Build Docker Image
      docker_image:
        name: abctechnologies-image
        path: /home/ubuntu/ABCtechnologies

    - name: Run Docker Container
      docker_container:
        name: abc_container
        image: abctechnologies-image
        state: started
        ports:
          - "9080:8080"

2. Kubernetes Manifest Files:

a) Deployment (deployment.yaml):

apiVersion: apps/v1
kind: Deployment
metadata:
  name: abc-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: abc
  template:
    metadata:
      labels:
        app: abc
    spec:
      containers:
      - name: abc-container
        image: abctechnologies-image
        ports:
        - containerPort: 8080

b) Service (service.yaml):

apiVersion: v1
kind: Service
metadata:
  name: abc-service
spec:
  selector:
    app: abc
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort

3. Ansible Playbook for Kubernetes:

---
- hosts: k8s-master
  tasks:
    - name: Apply Deployment
      shell: kubectl apply -f /home/ubuntu/k8s/deployment.yaml

    - name: Apply Service
      shell: kubectl apply -f /home/ubuntu/k8s/service.yaml


Task 5: Monitoring using Prometheus and Node Exporter

1. Install Prometheus:
   - Follow instructions from: https://prometheus.io/docs/prometheus/latest/installation/
   sudo useradd --no-create-home --shell /bin/false prometheus

2. prometheus.yml config:
   scrape_configs:
     - job_name: 'node'
       static_configs:
         - targets: ['localhost:9100']

3. Install Node Exporter:
   wget https://github.com/prometheus/node_exporter/releases/download/v*/node_exporter-*.tar.gz
   tar xvfz node_exporter-*.tar.gz
   cd node_exporter-*/
   ./node_exporter &

4. Access Prometheus Dashboard:
   http://localhost:9090

5. View node metrics at:
   http://localhost:9100/metrics
